import React from 'react';
import styled from 'styled-components';
import { useFinance } from '../context/FinanceContext';

const ListContainer = styled.div`
  background: white;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
  margin-top: 2rem;
  overflow: hidden;
`;

const ListHeader = styled.div`
  padding: 1.5rem 2rem;
  border-bottom: 1px solid var(--light);
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const Title = styled.h3`
  color: var(--dark);
  font-size: 1.1rem;
  font-weight: 600;
`;

const TransactionsList = styled.div`
  max-height: 400px;
  overflow-y: auto;
  padding: 1rem 0;

  &::-webkit-scrollbar {
    width: 8px;
  }

  &::-webkit-scrollbar-track {
    background: var(--light);
    border-radius: 4px;
  }

  &::-webkit-scrollbar-thumb {
    background: var(--primary);
    border-radius: 4px;
  }
`;

const TransactionItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 2rem;
  border-left: 4px solid transparent;
  transition: all 0.3s ease;
  position: relative;

  &:hover {
    background: rgba(108, 92, 231, 0.05);
    border-left-color: ${({ type }) => 
      type === 'income' ? 'var(--success)' : 'var(--danger)'};
    
    .delete-button {
      opacity: 1;
    }
  }

  &:not(:last-child) {
    border-bottom: 1px solid var(--light);
  }
`;

const DeleteButton = styled.button`
  position: absolute;
  right: 0.5rem;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--danger);
  opacity: 0;
  transition: all 0.3s ease;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 4px;

  &:hover {
    background: rgba(214, 48, 49, 0.1);
  }
`;

const TransactionInfo = styled.div`
  flex: 1;
`;

const Description = styled.h4`
  color: var(--dark);
  font-size: 1rem;
  font-weight: 500;
  margin-bottom: 0.25rem;
`;

const Date = styled.p`
  color: #999;
  font-size: 0.85rem;
`;

const Amount = styled.span`
  font-weight: 600;
  color: ${({ type }) => 
    type === 'income' ? 'var(--success)' : 'var(--danger)'};
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 2rem;
  color: #999;
`;

const formatDate = (dateString) => {
  if (!dateString) return '-';
  
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      return '-';
    }
    
    return new Intl.DateTimeFormat('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    }).format(date);
  } catch (error) {
    console.error('Error formatting date:', error);
    return '-';
  }
};

const formatCurrency = (value) => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(value);
};

const TransactionList = () => {
  const { transactions } = useFinance();
  // Sort transactions by date (most recent first)  const sortedTransactions = [...transactions].sort((a, b) => {
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);
    return dateB.getTime() - dateA.getTime();
  });

  if (sortedTransactions.length === 0) {
    return (
      <ListContainer>
        <ListHeader>
          <Title>Histórico de Transações</Title>
        </ListHeader>
        <EmptyState>
          Nenhuma transação registrada
        </EmptyState>
      </ListContainer>
    );
  }

  return (
    <ListContainer>
      <ListHeader>
        <Title>Histórico de Transações ({sortedTransactions.length})</Title>
      </ListHeader>
      <TransactionsList>
        {sortedTransactions.map((transaction) => (          <TransactionItem 
            key={transaction.id}
            type={transaction.type}
          >
            <TransactionInfo>
              <Description>{transaction.description}</Description>
              <Date>{formatDate(transaction.date)}</Date>
            </TransactionInfo>
            <Amount type={transaction.type}>
              {transaction.type === 'expense' ? '- ' : '+ '}
              {formatCurrency(transaction.value)}
            </Amount>
            <DeleteButton
              className="delete-button"
              onClick={(e) => handleDelete(transaction.id, e)}
              title="Excluir transação"
            >
              ✕
            </DeleteButton>
          </TransactionItem>
        ))}
      </TransactionsList>
    </ListContainer>
  );
};

export default TransactionList;
